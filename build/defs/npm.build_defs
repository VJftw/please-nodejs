subinclude("///nodejs//build/defs:utils")

def nodejs_npm_package(
        name: str,
        package_name: str = None,
        version: str,
        deps: list = [],
        license: str = None,
        visibility = [],
        registry: str = None,
        toolchain: str = None,
        please_nodejs_tool: str = None):
    """ Build rule for obtaining a remote NPM package from a registry.
    Args:
        name: The name of the build rule.
        package_name: The name of the package to download if it is different
                      from the name.
        version: The version of the package to download.
        deps: The other packages that this package depends on.
        license: The license that the package has.
        visibility: The targets to make the package visible to.
        registry: The registry to download the package from. This defaults to 'DefaultNPMRegistry'.
        toolchain: The toolchain to use to download the package. This defaults to 'DefaultToolchain'.
        please_nodejs_tool: The Please NodeJS tool to use. This defaults to 'Tool'.
    """
    if not package_name:
        package_name = name

    toolchain = _param_or_global("toolchain", toolchain, "DefaultToolchain", "DEFAULT_TOOLCHAIN")
    registry = _param_or_global("registry", registry, "DefaultNPMRegistry", "DEFAULT_NPM_REGISTRY")
    please_nodejs_tool = _param_or_global("please_nodejs_tool", please_nodejs_tool, "Tool", "TOOL")

    # npm packages can have / (directory separator) in them, replace with '___'.
    safe_package_name = package_name.replace("/", "___")

    return genrule(
        name = name,
        tools = [
            please_nodejs_tool,
            toolchain,
        ],
        deps = deps,
        cmd = f"""
        set -Eexuo pipefail
        source $(location {toolchain})/venv.sh

        # verify that dependencies are available
        npm view {package_name}@{version} dependencies --json > required_dependencies.json
        "$(exe {please_nodejs_tool})" \\
            --log_format=console \\
            npmpackagedeps \\
            --required_json="required_dependencies.json"

        # add the new module to the cache.
        npm cache add {package_name}@{version}
        npm view {package_name}@{version} --json > view.json
        "$(exe {please_nodejs_tool})" \\
            --log_format=console \\
            create_npm_package_lock_meta \\
            --name="{package_name}" \\
            --version="{version}" \\
            --view=view.json \\
            --out=metadata.json

        safe_pkg_name="$(echo "{package_name}" | sed 's#/#___#g')"
        mv metadata.json $safe_pkg_name@{version}.metadata.json
        tar -czf $safe_pkg_name@{version}.npmcache.tgz .npm
        """,
        outs = [
            f"{safe_package_name}@{version}.npmcache.tgz",
            f"{safe_package_name}@{version}.metadata.json",
        ],
        visibility = visibility,
        exported_deps = deps,
    )

def nodejs_package_json(
        name: str,
        deps: list = [],
        extra: dict = {},
        visibility: list = [],
        please_nodejs_tool: str = None,
        toolchain: str = None):
    """ Build rule for generating a package.json from the given deps.
    Args:
        name: The name of the build rule.
        deps: The dependencies to generate a package.json for.
        extra: Any extra metadata to add to the package.json. This is merged.
        visibility: The targets to make the package.json visible to.
        please_nodejs_tool: The Please NodeJS tool to use. This defaults to 'Tool'.
        toolchain: The toolchain to use to download the package. This defaults to 'DefaultToolchain'.
    """
    please_nodejs_tool = _param_or_global("please_nodejs_tool", please_nodejs_tool, "Tool", "TOOL")
    toolchain = _param_or_global("toolchain", toolchain, "DefaultToolchain", "DEFAULT_TOOLCHAIN")

    extra_json = json(extra)

    package_json = genrule(
        name = f"{name}_json",
        deps = deps,
        needs_transitive_deps = True,
        tools = [please_nodejs_tool],
        outs = ["package.json"],
        cmd = f"""
set -Eeuo pipefail
cat <<EOF > extra.json
{extra_json}
EOF
# construct package.json from existing metadata.

"$(exe {please_nodejs_tool})" \\
    --log_format=console \\
    packagejson \\
    --out="$OUTS" \\
    --merge_files=extra.json
        """,
        visibility = visibility,
        labels = ["codegen"],
        exported_deps = deps,
    )

    package_lock_json = genrule(
        name = f"{name}_lock",
        deps = deps,
        needs_transitive_deps = True,
        tools = [please_nodejs_tool],
        outs = ["package-lock.json"],
        cmd = f"""
set -Eeuo pipefail

# construct package-lock.json from existing metadata.
"$(exe {please_nodejs_tool})" \\
    --log_format=console \\
    packagelockjson \\
    --out="$OUTS"
        """,
        visibility = visibility,
        exported_deps = deps,
    )

    toolchain = _param_or_global("toolchain", toolchain, "DefaultToolchain", "DEFAULT_TOOLCHAIN")

    node_modules = genrule(
        name = f"{name}_node_modules",
        srcs = {
            "package_json": [package_json],
            "package_lock_json": [package_lock_json],
        },
        needs_transitive_deps = True,
        sandbox = True,
        tools = [
            toolchain,
        ],
        outs = ["node_modules/"],
        deps = [package_json, package_lock_json],
        cmd = f"""
        set -Eeuo pipefail

        source $(location {toolchain})/venv.sh

        find . -name '*.tgz' -exec tar -xzf {{}} \;

        mv $SRCS_PACKAGE_JSON package.json
        mv $SRCS_PACKAGE_LOCK_JSON package-lock.json
        npm ci --install-links
        rsync --archive --verbose --copy-links ./node_modules/ ./node_modules_cp/
        rm -rf node_modules_cp/.bin
        mv node_modules/.bin node_modules_cp/
        rm -rf node_modules
        mv node_modules_cp node_modules
        """,
        visibility = visibility,
        labels = ["codegen"],
    )

    return filegroup(
        name = name,
        srcs = [package_json, package_lock_json],
        visibility = visibility,
    )
