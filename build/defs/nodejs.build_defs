"""
"""

def nodejs_toolchain(
    name: str,
    version: str,
    visibility: list = ["PUBLIC"],
):
    arch = ""
    if CONFIG.ARCH == "amd64":
        arch = "x64"
    else:
        fail(f"Unsupported architecture: {CONFIG.ARCH}")

    download=remote_file(
        name = f"{name}#download",
        url = f"https://nodejs.org/dist/v{version}/node-v{version}-{CONFIG.OS}-{arch}.tar.xz",
        extract = True,
        visibility = visibility,
    )

    venv=genrule(
        name = f"{name}_venv",
        srcs = [download],
        outs = [f"{name}_venv"],
        cmd = """
mv $SRCS $OUTS

cat <<EOF > $OUTS/venv.sh
    DIR="\\\$( cd "\\\$( dirname "\\\${BASH_SOURCE[0]}" )" && pwd )"
    export PATH="\\\$DIR/bin:$PATH"
    echo "added \\\$DIR/bin to the path"
EOF
source $OUTS/venv.sh

npm install --location=global npm yarn
        """,
        visibility = visibility,
    )

def nodejs_esbuild_toolchain(
    name: str,
    version: str,
    visibility: list = ["PUBLIC"],
):
    arch = ""
    if CONFIG.ARCH == "amd64":
        arch = "64"
    else:
        fail(f"Unsupported architecture: {CONFIG.ARCH}")

    remote_file(
        name = name,
        url = f"https://registry.npmjs.org/esbuild-{CONFIG.OS}-{arch}/-/esbuild-{CONFIG.OS}-{arch}-{version}.tgz",
        extract = True,
        binary = True,
        visibility = visibility,
        exported_files = [
            "package/bin/esbuild",
        ],
    )

def nodejs_npm_package(
    name: str,
    version: str,
    toolchain: str,
    visibility = ["PUBLIC"],
):
    genrule(
        name = name,
        tools = [
            f"{toolchain}_venv",
            "//third_party/binary:jq",
        ],
        cmd = f"""
set -Eeuo pipefail
JQ=$(exe //third_party/binary:jq)

source $(location {toolchain}_venv)/venv.sh
npm pack {name}@{version}

mv {name}-{version}.tgz $OUTS
        """,
        # We can now reference this dependency directly in a package.json
        # https://dev.to/scooperdev/use-npm-pack-to-test-your-packages-locally-486e#:~:text=Fourth%3A%20Point%20package.json%20to%20your%20file
        outs = [f"{name}@{version}.tgz"],
        visibility = visibility,
    )

def nodejs_esbuild_bundle(
    name: str,
    srcs: list = [],
    deps: list = [],
    esbuild_args: list = [],
    browser: bool = False,
    browsers: list = ["chrome58","firefox57","safari11","edge16"],
    toolchain: str,
):
    if browser:
        browser_flag=",".join(browsers)
        esbuild_args+=["--minify", "--sourcemap", f"--target={browser_flag}"]

    package_json=genrule(
        name = f"{name}_package_json",
        srcs = {
            "deps": deps + ["//third_party/nodejs:pkg"],
        },
        tools = ["//third_party/binary:jq"],
        outs = [f"{name}_package.json"],
        cmd = f"""
set -Eeuo pipefail
JQ=$(exe //third_party/binary:jq)

# add dependencies
echo '{{"dependencies": {{}}}}' > package.json
for srcs_dep in $SRCS_DEPS; do
    pkg_name="$(echo "$srcs_dep" | cut -f1 -d\\@ | xargs basename)"

    $JQ \\
        --arg n "$pkg_name" \\
        --arg v "file:$srcs_dep" \\
        '.dependencies[$n] = $v' \\
        package.json >> package.json.new
    mv package.json.new package.json
done

mv package.json $OUTS
        """,
    )

    node_modules=genrule(
        name = f"{name}_node_modules",
        srcs = {
            "package_json": [package_json],
        },
        tools = [f"{toolchain}_venv"],
        outs = [f"{name}_node_modules"],
        deps = deps + ["//third_party/nodejs:pkg"],
        cmd = f"""
set -Eeuo pipefail
source $(location {toolchain}_venv)/venv.sh

mv $SRCS_PACKAGE_JSON package.json
npm install

mv node_modules $OUTS
        """,
    )

    esbuild_args_cmd=" ".join(esbuild_args)
    extra_cmds=""
    if not browser:
        genrule(
            name = name,
            srcs = {
                "package_json": [package_json],
                "node_modules": [node_modules],
                "srcs": srcs,
            },
            tools = [
                "//third_party/nodejs:esbuild",
                f"{toolchain}_venv",
            ],
            outs = [name],
            cmd = f"""
set -Eeuo pipefail
mv $SRCS_PACKAGE_JSON package.json
mv $SRCS_NODE_MODULES node_modules
$(exe //third_party/nodejs:esbuild) \\
    --bundle {esbuild_args_cmd} \\
    --outfile=out.js \\
    $SRCS_SRCS

source $(location {toolchain}_venv)/venv.sh
npx pkg -t node18-linux-x64 out.js
mv out $OUTS
            """,
            binary = True,
        )
    else:
        genrule(
            name = name,
            srcs = {
                "package_json": [package_json],
                "node_modules": [node_modules],
                "srcs": srcs,
            },
            tools = ["//third_party/nodejs:esbuild"],
            outs = [f"{name}.js"],
            cmd = f"""
set -Eeuo pipefail
mv $SRCS_PACKAGE_JSON package.json
mv $SRCS_NODE_MODULES node_modules
$TOOLS \\
    --bundle {esbuild_args_cmd} \\
    --outfile=$OUTS \\
    $SRCS_SRCS
            """,
        )
